<?php

namespace LearnHub\MainApp\MainAppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
/**
// * @ORM\Entity(repositoryClass="LearnHub\MainApp\MainAppBundle\Repository\UserRepository")
 * @ORM\Table(name="user")
 * */
class User implements UserInterface, \Serializable {

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     * */
    protected $id;

    /**
     * @ORM\Column(type="string",length=100)
     * */
    protected $password;

    /**
     * @ORM\Column(type="string",length=100)
     * */
    protected $username;

//    /**
//     * @ORM\ManyToOne(targetEntity="AccessLevel", inversedBy="users")
//     * @ORM\JoinColumn(name="access_level", referencedColumnName="id")
//     * */
//    protected $accessLevel;

    protected $isActive;

    public function _construct() {
        $this->isActive = true;
    }

    /**
     * @return mixed
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

//    /**
//     * Set accessLevel
//     *
//     * @param AccessLevel $accessLevel
//     *
//     * @return User
//     */
//    public function setAccessLevel(AccessLevel $accessLevel)
//    {
//        $this->accessLevel = $accessLevel;
//
//        return $this;
//    }
//
//    /**
//     * Get accessLevel
//     *
//     * @return integer
//     */
//    public function getAccessLevel()
//    {
//        return $this->accessLevel;
//    }

    /**
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     *
     * @return (Role|string)[] The user roles
     */
    public function getRoles() {
        return array('ROLE_USER');
    }

    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt() {
        return null;
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */

    public function eraseCredentials() {

    }

    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
        ));
    }

    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            ) = unserialize($serialized);
    }


}
